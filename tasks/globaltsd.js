module.exports = function(grunt) {
	'use strict';
	var path = require('path'),
		fs = require('fs');
	grunt.registerTask('globaltsd', 'Generate global tsd file', function () {
		var done = this.async();
		var options = this.options();
		var target = options.target,
			baseDir = options.baseDir,
			exclude = options.exclude,
			test = options.test,
			references = options.references || [],
			dirPrefix = options.dirPrefix || '';
		function indent(ind) {
			return new Array( ind + 1 ).join( '\t' );
		}
		function saneModuleName (m) {
			var ind;
			while (m.indexOf('-') >= 0) {
				ind = m.indexOf('-');
				m = m.substr(0, ind) + m[ind + 1].toUpperCase() + m.substr(ind + 2);
			}
			return m;
		}
		function processDir (dir, ind, dirfilename, parentDir) {
			var r = '',
				fileCount = 0;
			if (parentDir === '.') {
				r += references.map(function (r) { return '/// <reference path="' + r + '" />\n'}).join('');
			}
			r += '// Autogenerated by grunt globaltsd task. Changes to this file will be overwritten\n';
			fs.readdirSync(dir).forEach(function (item) {
				var diroutput,
					relative,
					resolved = path.resolve(dir, item);
				if (exclude.indexOf(item) < 0) {
					try {
						var stat = fs.statSync (resolved);
						if (stat.isDirectory ()) {
							diroutput = processDir (resolved, ind, path.resolve(dir, dirPrefix + item + '.ts'), './' + item);
							if (diroutput.fileCount) {
								r += indent (ind) + 'export import ' + saneModuleName(path.basename(item, '.d' + path.extname(item))) + ' = require (\'' + parentDir + '/' + dirPrefix + path.basename(item, '.d' + path.extname(item)) + '\')\n';
							}
						}
						else if (stat.isFile ()) {
							relative = path.relative(dir, resolved);
							if ((path.extname (item) === '.ts') && ((item.lastIndexOf ('.d.ts') === (item.length - '.d.ts'.length)))) {
								fileCount += 1;
								if (!fs.existsSync(path.resolve(dir, path.basename(relative, '.d' + path.extname(item))))) {
									r += indent (ind) + 'export import ' + saneModuleName(path.basename(relative, '.d' + path.extname(item))) + ' = require (\'' + parentDir + '/' + path.basename(relative, '.d' + path.extname(item)) + '\')\n';
								}
							}
						}
					}
					catch (err) {
						console.log('error: ' + item);
						console.log(err);
						done(err);
					}
				}
			});

			if (fileCount) {
				if (test) {
					console.log ();
					console.log ('writing file: ' + dirfilename);
					console.log (r);
					console.log ();
				}
				else {
					grunt.file.write(dirfilename, r);
				}
			}

			return { fileCount: fileCount  };
		}
		processDir(baseDir, 0, path.basename(path.resolve(baseDir, target)), '.').data;
		//grunt.file.write(target, r);
		done();

	});
};